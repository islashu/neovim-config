-- return {
--   -- (Explanation) This sets up the LSP connection for the editor to talk to the language server.
--   "neovim/nvim-lspconfig",
--   -- event = "LazyFile",
--   dependencies = {
--     { "folke/neoconf.nvim", cmd = "Neoconf", config = false, dependencies = { "nvim-lspconfig" } },
--     { "folke/neodev.nvim", opts = {} },
--     "mason.nvim",
--     "williamboman/mason-lspconfig.nvim",
--   },
--   -- (Explanation)
--   ---@class PluginLspOpts
--   opts = {
--     ---@type vim.diagnostic.Opts
--     diagnostics = {
--       underline = true,
--       update_in_insert = false,
--       virtual_text = {
--         spacing = 4,
--         source = "if_many",
--         prefix = "●",
--       },
--       severity_sort = true,
--       signs = {
--         text = {
--           [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,
--           [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,
--           [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,
--           [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,
--         },
--       },
--     },
--     -- Enable this to enable the builtin LSP inlay hints on Neovim >= 0.10.0
--     -- Be aware that you also will need to properly configure your LSP server to
--     -- provide the inlay hints.
--     inlay_hints = {
--       enabled = false,
--     },
--     -- Enable this to enable the builtin LSP code lenses on Neovim >= 0.10.0
--     -- Be aware that you also will need to properly configure your LSP server to
--     -- provide the code lenses.
--     codelens = {
--       enabled = false,
--     },
--     capabilities = {},
--     format = {
--       formatting_options = nil,
--       timeout_ms = nil,
--     },
--     -- (Explanation) LSP Server Settings, you must insert the specific language server here to allow for autocomplete for the language
--     ---@type lspconfig.options
--     servers = {
--       -- (Explanation) you can either add the lsp here or go to the mason menu to download the lsp servers which are must easier
--     },
--     ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>
--     setup = {},
--   },
--   ---@param opts PluginLspOpts
--   config = function(_, opts)
--     -- this should be automatically involves whencalles
--     if LazyVim.has("neoconf.nvim") then
--       local plugin = require("lazy.core.config").spec.plugins["neoconf.nvim"]
--       require("neoconf").setup(require("lazy.core.plugin").values(plugin, "opts", false))
--     end
--
--     -- setup autoformat
--     LazyVim.format.register(LazyVim.lsp.formatter())
--
--     -- setup keymaps
--     LazyVim.lsp.on_attach(function(client, buffer)
--       require("lazyvim.plugins.lsp.keymaps").on_attach(client, buffer)
--     end)
--
--     local register_capability = vim.lsp.handlers["client/registerCapability"]
--
--     vim.lsp.handlers["client/registerCapability"] = function(err, res, ctx)
--       ---@diagnostic disable-next-line: no-unknown
--       local ret = register_capability(err, res, ctx)
--       local client = vim.lsp.get_client_by_id(ctx.client_id)
--       local buffer = vim.api.nvim_get_current_buf()
--       require("lazyvim.plugins.lsp.keymaps").on_attach(client, buffer)
--       return ret
--     end
--
--     -- diagnostics signs
--     if vim.fn.has("nvim-0.10.0") == 0 then
--       for severity, icon in pairs(opts.diagnostics.signs.text) do
--         local name = vim.diagnostic.severity[severity]:lower():gsub("^%l", string.upper)
--         name = "DiagnosticSign" .. name
--         vim.fn.sign_define(name, { text = icon, texthl = name, numhl = "" })
--       end
--     end
--
--     -- inlay hints
--     if opts.inlay_hints.enabled then
--       LazyVim.lsp.on_attach(function(client, buffer)
--         if client.supports_method("textDocument/inlayHint") then
--           LazyVim.toggle.inlay_hints(buffer, true)
--         end
--       end)
--     end
--
--     -- code lens
--     if opts.codelens.enabled and vim.lsp.codelens then
--       LazyVim.lsp.on_attach(function(client, buffer)
--         if client.supports_method("textDocument/codeLens") then
--           vim.lsp.codelens.refresh()
--           --- autocmd BufEnter,CursorHold,InsertLeave <buffer> lua vim.lsp.codelens.refresh()
--           vim.api.nvim_create_autocmd({ "BufEnter", "CursorHold", "InsertLeave" }, {
--             buffer = buffer,
--             callback = vim.lsp.codelens.refresh,
--           })
--         end
--       end)
--     end
--
--     if type(opts.diagnostics.virtual_text) == "table" and opts.diagnostics.virtual_text.prefix == "icons" then
--       opts.diagnostics.virtual_text.prefix = vim.fn.has("nvim-0.10.0") == 0 and "●"
--         or function(diagnostic)
--           local icons = require("lazyvim.config").icons.diagnostics
--           for d, icon in pairs(icons) do
--             if diagnostic.severity == vim.diagnostic.severity[d:upper()] then
--               return icon
--             end
--           end
--         end
--     end
--
--     vim.diagnostic.config(vim.deepcopy(opts.diagnostics))
--
--     -- This id to set up the LSP servers, in order to attach the lsp to the editor, you will need to run lsp.setup({})
--     local servers = opts.servers
--     local has_cmp, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
--     local capabilities = vim.tbl_deep_extend(
--       "force",
--       {},
--       vim.lsp.protocol.make_client_capabilities(),
--       has_cmp and cmp_nvim_lsp.default_capabilities() or {},
--       opts.capabilities or {}
--     )
--
--     -- why are you running a deep copy here
--     local function setup(server)
--       local server_opts = vim.tbl_deep_extend("force", {
--         capabilities = vim.deepcopy(capabilities),
--       }, servers[server] or {})
--
--       if opts.setup[server] then
--         if opts.setup[server](server, server_opts) then
--           return
--         end
--       elseif opts.setup["*"] then
--         if opts.setup["*"](server, server_opts) then
--           return
--         end
--       end
--       require("lspconfig")[server].setup(server_opts)
--     end
--
--     -- get all the servers that are available through mason-lspconfig, this is requiring the mason-lspconfig package and not really interacting with the nvim plugin
--     local have_mason, mlsp = pcall(require, "mason-lspconfig")
--     local all_mslp_servers = {}
--     if have_mason then
--       all_mslp_servers = vim.tbl_keys(require("mason-lspconfig.mappings.server").lspconfig_to_package)
--       print("All mslp servers: ", all_mslp_servers)
--     end
--
--     local ensure_installed = {} ---@type string[]
--     for server, server_opts in pairs(servers) do
--       if server_opts then
--         server_opts = server_opts == true and {} or server_opts
--         -- run manual setup if mason=false or if this is a server that cannot be installed with mason-lspconfig
--         if server_opts.mason == false or not vim.tbl_contains(all_mslp_servers, server) then
--           setup(server)
--         elseif server_opts.enabled ~= false then
--           ensure_installed[#ensure_installed + 1] = server
--         end
--       end
--     end
--
--     if have_mason then
--       mlsp.setup({ ensure_installed = ensure_installed, handlers = { setup } })
--     end
--
--     -- if LazyVim.lsp.get_config("denols") and LazyVim.lsp.get_config("tsserver") then
--     --   local is_deno = require("lspconfig.util").root_pattern("deno.json", "deno.jsonc")
--     --   LazyVim.lsp.disable("tsserver", is_deno)
--     --   LazyVim.lsp.disable("denols", function(root_dir)
--     --     return not is_deno(root_dir)
--     --   end)
--     -- end
--     --
--     function dump(o)
--       if type(o) == "table" then
--         local s = "{ "
--         for k, v in pairs(o) do
--           if type(k) ~= "number" then
--             k = '"' .. k .. '"'
--           end
--           s = s .. "[" .. k .. "] = " .. dump(v) .. ","
--         end
--         return s .. "} "
--       else
--         return tostring(o)
--       end
--     end
--
--     -- (Explanation) This does not download the LSP servers, mason does that, this is to configure mason as well as run the LSP servers.
--     -- Since you will have to run the servers after downloading. This is the setup for the LSP servers.
--     -- This statement will run when a new lsp is installed,set up the lsp server for use
--     require("mason-lspconfig").setup({
--       handlers = {
--         -- The parameter "server_name" is automatically passed by mason-lspconfig,it is a callback function in which during intialisation all installed servers will be pass into the handler functions
--         function(server_name)
--           local server = servers[server_name] or {}
--           server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
--           require("lspconfig")[server_name].setup(server)
--         end,
--       },
--     })
--   end,
-- }
-- -- return {
-- --   -- {
-- --   --   "VonHeikemen/lsp-zero.nvim",
-- --   --   config = function()
-- --   --     local lsp_zero = require("lsp-zero")
-- --   --
-- --   --     lsp_zero.on_attach(function(client, bufnr)
-- --   --       lsp_zero.default_keymaps({ buffer = bufnr })
-- --   --     end)
-- --   --   end,
-- --   --   require("lspconfig").tsserver.setup({}),
-- --   --   require("lspconfig").perlnavigator.setup({}),
-- --   -- },
-- --   {
-- --     -- lsp, formatter, linters downloader, downloader only, does not attach lsp to the editor (you need to attach the lsp so that the editor can receive autocompletion, diagnostics from the lsp)
-- --     "williamboman/mason.nvim",
-- --     lazy = false,
-- --     config = function()
-- --       require("mason").setup({})
-- --     end,
-- --   },
-- --   {
-- --     -- lsp configurer -> to set up the different options of lsp such as keymaps, diagnostics, error checking etc
-- --     "williamboman/mason-lspconfig.nvim",
-- --     lazy = false,
-- --     opts = {
-- --       auto_install = true,
-- --     },
-- --     -- The parameter "server_name" is automatically passed by mason-lspconfig,it is a callback function in which during intialisation all installed servers will be pass into the handler functions
-- --     handlers = {
-- --       function(server_name, opts)
-- --         local servers = opts.servers
-- --         print("Setting up LSP server: ", server_name)
-- --         print("Getting the opts: ", opts)
-- --         local server = servers[server_name] or {}
-- --         server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
-- --         -- This is somehow using the lsp config
-- --         require("lspconfig")[server_name].setup(server)
-- --       end,
-- --     },
-- --   },
-- --   {
-- --     -- controls lsp servers -> allows for the restarting of all lsp servers, health checker for lsp servers
-- --     "neovim/nvim-lspconfig",
-- --     lazy = false,
-- --   },
-- -- }
